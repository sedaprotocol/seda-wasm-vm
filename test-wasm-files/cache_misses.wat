(module
  (import "wasi_snapshot_preview1" "fd_write" (func $fd_write (param i32 i32 i32 i32) (result i32)))
  (import "wasi_snapshot_preview1" "proc_exit" (func $proc_exit (param i32)))

  ;; Allocate 100 pages (6.4MB) to ensure we exceed typical L3 cache sizes
  (memory (export "memory") 100)

  ;; Initialize memory with some data
  (data (i32.const 0) "\01\02\03\04\05\06\07\08")

  ;; Function to cause cache misses through unrolled memory accesses
  (func $cause_cache_misses (export "_start")
    (local $sum i32)
    (local $stride i32)

    ;; Set a large stride (4096 bytes = 4KB, larger than typical cache lines)
    (local.set $stride (i32.const 4096))

    ;; Initialize sum
    (local.set $sum (i32.const 0))

		;; Copy+paste the section below to verify that more gas is used despite the
		;; if branch not being taken.
    ;; Unrolled memory accesses with large stride
    ;; Each access is likely to cause a cache miss
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.const 0))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (local.get $stride))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 2)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 3)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 4)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 5)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 6)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 7)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 8)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 9)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 10)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 11)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 12)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 13)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 14)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 15)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 16)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 17)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 18)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 19)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 20)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 21)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 22)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 23)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 24)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 25)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 26)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 27)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 28)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 29)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 30)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 31)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 32)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 33)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 34)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 35)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 36)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 37)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 38)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 39)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 40)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 41)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 42)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 43)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 44)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 45)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 46)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 47)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 48)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 49)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 50)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 51)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 52)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 53)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 54)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 55)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 56)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 57)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 58)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 59)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 60)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 61)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 62)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 63)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 64)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 65)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 66)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 67)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 68)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 69)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 70)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 71)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 72)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 73)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 74)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 75)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 76)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 77)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 78)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 79)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 80)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 81)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 82)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 83)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 84)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 85)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 86)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 87)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 88)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 89)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 90)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 91)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 92)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 93)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 94)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 95)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 96)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 97)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 98)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 99)))))
    (local.set $sum (i32.add (local.get $sum) (i32.load (i32.mul (local.get $stride) (i32.const 100)))))

    ;; The previous metering implementation incorrectly injected the metering
		;; for the branches before the `end` of the if branch, meaning that everything
		;; preceding went unmetered when this small if branch was not taken.
    ;; Check if sum is less than 0 (should never happen)
    (if (i32.lt_u (local.get $sum) (i32.const 0))
      (then
        ;; If less than 0, set sum to 0
        (local.set $sum (i32.const 0))
      )
    )

    ;; Exit with the sum as the exit code
    (call $proc_exit (local.get $sum))
  )
)
